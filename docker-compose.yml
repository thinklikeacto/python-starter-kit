version: '3.8'

services:
  # Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - APP_NAME=python-starter-kit
      - ENV=development
      - API_V1_PREFIX=/api/v1
      # Database connection strings as service URLs
      - POSTGRES_URL=postgresql://app_user:app_password@postgres:5432/starter_kit
      - MONGODB_URL=mongodb://app_user:app_password@mongodb:27017/starter_kit
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Service
  postgres:
    build:
      context: ./services/postgres
      dockerfile: docker/Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=starter_kit
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./services/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Service
  mongodb:
    build:
      context: ./services/mongodb
      dockerfile: docker/Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin_password
      - MONGO_INITDB_DATABASE=starter_kit
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./services/mongodb/init:/docker-entrypoint-initdb.d
      - ./services/mongodb/logs:/var/log/mongodb
    networks:
      - backend
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service
  redis:
    build:
      context: ./services/redis
      dockerfile: docker/Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./services/redis/config:/usr/local/etc/redis
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  backend:
    driver: bridge 